buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}

apply plugin: 'net.minecraftforge.gradle'

version = "${version_major}.${version_minor}.${version_patch}"
group = "com.snowshock35.jeiintegration" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jeiintegration_${mc_version}"

//adds the build number to the end of the version string if on a build server
if (System.getenv('TRAVIS_BUILD_NUMBER') != null) {
    version += ".${System.getenv('TRAVIS_BUILD_NUMBER')}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings  channel: "${mcp_channel}", version: "${mcp_mappings}"
	    runs {
        client {
            workingDirectory project.file('run')
            mods {
                jeiintegration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            mods {
                jeiintegration {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "jei"
        url =  "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${version_jei}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${version_jei}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "jeiintegration",
            "Specification-Vendor": "SnowShock35",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"SnowShock35",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

 jar {
     destinationDir = file (rootProject.getRootDir().getPath() + '/output')
 }

 task deobfJar(type: Jar) {
     from sourceSets.main.output
     classifier = 'deobf'
     destinationDir = file (rootProject.getRootDir().getPath() + '/output')
 }

 task sourcesJar(type: Jar) { //dependsOn: 'sourceMainJava'
     from "build/sources/main"
     from "build/resources/main"
     classifier "sources"
     destinationDir = file (rootProject.getRootDir().getPath() + '/output')
 }

 artifacts {
     archives deobfJar, sourcesJar
 }

 curseforge {
     apiKey = System.getenv('CURSE_KEY') == null ? '0' : System.getenv('CURSE_KEY')
     project {
         id = curse_project_id
         changelog = System.getenv('CHANGELOG') == null ? '' : System.getenv('CHANGELOG')
         changelogType = 'markdown'
         releaseType =  'alpha'
         mainArtifact (jar) {
             displayName = "${jar.archiveName}".replace(".jar", "")
             relations {
                 requiredLibrary 'just-enough-items-jei'
             }
         }
         addArtifact (deobfJar) {
             displayName = "${deobfJar.archiveName}".replace(".jar", "")
         }
         addArtifact (sourcesJar) {
             displayName = "${sourcesJar.archiveName}".replace(".jar", "")
         }
     }
 }